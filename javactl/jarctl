#!/bin/bash
#
# Controls to build and manipulate jar archives
#
# jar options
#
# c - create new jar
# u - update jar
# x - extract jar
#
# v - verbose
# f - create file
# m - specify Manifest.txt
# e - specify program entry point
#
#
# Order of f m e options in command must match order of name of
# jar file, manifest and entry point.
#
# Using a manifest
#
# jar cvfm NameOf.jar Manifest.txt File1.class File2.class ...
#

COMPILED='*.jar'
MANIFEST="Manifest.txt"
JAR_CREATE="jar cvf"
JAR_UPDATE="jar uvf"
JAR_EXTRACT="jar xvf"
USE_MANIFEST="m"
USE_ENTRY_POINT="e"

program=$(basename "$0")
action="$1"


if [[ "$action" != "create" && "action" != "update" ]]; then
        shift
fi


usage() {
        printf "\nUsage: $program command [target]\n\n"
        printf '%-10s%-25s%-25s%-25s \n' "help" "" "" "display this message"
        printf '%-10s%-25s%-25s%-25s \n' "clean" "" "" "delete all jar files"
        printf '%-10s%-25s%-25s%-25s \n' "create" "EntryPoint.class" "[other classes or jars]" "create jar"
        printf '%-10s%-25s%-25s%-25s \n' "update" "EntryPoint.class" "[other classes or jars]" "update jar"
        printf '%-10s%-25s%-25s%-25s \n' "extract" "FileName.jar" "" "extract jar archive"
}


clean() {
        for file in $COMPILED
        do
                rm -f "$file"
        done
}


extract() {
        $JAR_EXTRACT "$@"
}


build_jar() {

        if [[ "$1" = "create" ]]; then
                jar_command="$JAR_CREATE"
        else
                jar_command="$JAR_UPDATE"
        fi

        shift

        if [[ "$1" = "$MANIFEST" ]]; then
                shift
                jar_name="${1%.*}.jar"
                jar_command="$jar_command$USE_MANIFEST $jar_name $MANIFEST $@"
        else
                jar_name="${1%.*}.jar"
                entry_point="${1%.*}"
                jar_command="$jar_command$USE_ENTRY_POINT $jar_name $entry_point $@"
        fi


        $jar_command
}


error_exit() {
        echo "Unrecognised command: '$action'"
        usage
        exit 1
}


case "$action" in
        create | update)
                build_jar "$@"
                ;;
        clean)
                clean
                ;;
        extract)
                extract "$@"
                ;;
        help)
                usage
                ;;
        *)
                error_exit
                ;;
esac

