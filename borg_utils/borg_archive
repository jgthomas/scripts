#!/bin/bash

[[ -f /home/james/.credentials ]] \
        && . /home/james/.credentials \
        || { echo "Credentials not found"; exit 1; }


list() {
        borg list --remote-path=borg1 \
                $RSYNC_DOT_NET_USER@$RSYNC_DOT_NET_DOMAIN:"$1"::"$2"
}


check() {
        borg check --remote-path=borg1 \
                $RSYNC_DOT_NET_USER@$RSYNC_DOT_NET_DOMAIN:"$1"::"$2"
}


delete() {
        borg delete --remote-path=borg1 \
                $RSYNC_DOT_NET_USER@$RSYNC_DOT_NET_DOMAIN:"$1"::"$2"
}


mount() {
        mkdir -p /tmp/borg_backup
        borg mount --remote-path=borg1 \
                $RSYNC_DOT_NET_USER@$RSYNC_DOT_NET_DOMAIN:"$1"::"$2" \
                /tmp/borg_backup
}


unmount() {
        if [[ -d /tmp/borg_backup ]]; then
                fusermount -u /tmp/borg_backup && rmdir /tmp/borg_backup
        else
                echo 'No backup mounted'
        fi
}


rename() {
        if [[ $# -eq 3 ]]; then
                borg info --remote-path=borg1 \
                        $RSYNC_DOT_NET_USER@$RSYNC_DOT_NET_DOMAIN:"$1"::"$2" "$3"
        else
                { echo "Not enough arguments to rename"; exit 1; }
        fi
}


extract() {
        if [[ $# -eq 2 ]]; then
                borg extract -v --list --remote-path=borg1 \
                        $RSYNC_DOT_NET_USER@$RSYNC_DOT_NET_DOMAIN:"$1"::"$2" 
        elif [[ $# -eq 3 ]]; then
                borg extract --remote-path=borg1 \
                        $RSYNC_DOT_NET_USER@$RSYNC_DOT_NET_DOMAIN:"$1"::"$2" "$3"
        fi
}


case "$1" in
        "unmount")
                unmount
                exit 0
                ;;
esac


[[ $# -lt 3 ]] && { echo "Not enough arguments"; exit 1; }


case "$2" in
        "newArch-home")
                export BORG_PASSPHRASE=$HOME_PASSPHRASE
                ;;
        "newArch-system")
                export BORG_PASSPHRASE=$SYSTEM_PASSPHRASE
                ;;
        *)
                { echo "'$2' is not a repo"; exit 1; }
                ;;
esac


operation="$1"
shift


case $operation in
        "list")
                list "$@"
                ;;
        "check")
                check "$@"
                ;;
        "delete")
                delete "$@"
                ;;
        "mount")
                mount "$@"
                ;;
        "extract")
                extract "$@"
                ;;
        "rename")
                rename "$@"
                ;;
        *)
                { echo "Illegal operation"; exit 1; }
                ;;
esac

unset BORG_PASSPHRASE
exit 0
